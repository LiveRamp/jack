<%#
# Copyright 2011 Rapleaf
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
%>
<%= autogenerated %>
package <%= project_defn.databases_namespace %>;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Map;

import org.jvyaml.YAML;

import <%= JACK_NAMESPACE %>.BaseDatabaseConnection;
import <%= JACK_NAMESPACE %>.DatabaseConnection;
<% project_defn.databases.each do |db| %>
import <%= db.namespace %>.I<%= db.name %>;
import <%= db.namespace %>.impl.<%= db.name %>Impl;
<% end %>

public class DatabasesImpl implements IDatabases {
  private static final String PARTITION_NUM_ENV_VARIABLE_NAME = "TLB_PARTITION_NUMBER";
  private static final IDatabases mockDatabases = new MockDatabasesImpl();
  <% project_defn.databases.each do |db| %>
  private final I<%= db.name %> <%= db.name.underscore %>;
  <% end %>

  public DatabasesImpl(<%= project_defn.databases.map{|db| ["BaseDatabaseConnection", db.connection_name].join(" ")}.join(", ") %>) {
    <% project_defn.databases.each do |db| %>
    this.<%= db.name.underscore %> = new <%= db.name %>Impl(<%= db.connection_name %>, this);
    <% end %>
  }

  public DatabasesImpl() {
    // load database info from config folder
    Map env_info;
    try {
      env_info  = (Map)YAML.load(new FileReader("config/environment.yml"));
    } catch (FileNotFoundException e) {
      throw new RuntimeException(e);
    }
    Boolean use_mock = (Boolean)env_info.get("use_mock_db");
    Boolean use_parallel = (Boolean)env_info.get("enable_parallel_tests");
    if (use_mock != null && use_mock) {
    <% project_defn.databases.each do |db| %>
      this.<%= db.name.underscore %> = mockDatabases.get<%= db.name %>();
    <% end %>
    } else {
    <% project_defn.databases.each do |db| %>
      this.<%= db.name.underscore %> = new <%= db.name %>Impl(new DatabaseConnection(getDbName("<%= db.name.underscore %>", use_parallel)), this);
    <% end %>
    }
  }

  <% project_defn.databases.each do |db| %>

  public I<%= db.name %> <%= db.getter %> {
    return <%= db.name.underscore %>;
  }
  <% end %>

  /**
   * When using a parallel test environment, we append an integer that lives in
   * an environment variable to the database name.
   * 
   * @param base_name the name of the database
   * @param use_parallel if true, append an integer specified in an environment
   *                     variable to the end of base_name
   * @return the name of the database that we should connect to
   */
  protected String getDbName(String base_name, Boolean use_parallel) {
    if (use_parallel == null || !use_parallel) {
      return base_name;
    }
    else {
      String partitionNumber = System.getenv(PARTITION_NUM_ENV_VARIABLE_NAME);
      if (partitionNumber != null) {
        return base_name + partitionNumber;
      }
      else {
        throw new RuntimeException("Expected the " + PARTITION_NUM_ENV_VARIABLE_NAME + " environment variable to be set, but it wasn't. Either disable parallel tests or make sure the variable is defined.");
      }
    }
  }
}

