<%#
# Copyright 2011 Rapleaf
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
%>
<%= autogenerated %>
package <%= root_package %>.models;

import java.io.IOException;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;

import <%= root_package %>.I<%= db_name %>;

import <%= JACK_NAMESPACE %>.ModelWithId;
import <%= JACK_NAMESPACE %>.BelongsToAssociation;
import <%= JACK_NAMESPACE %>.HasManyAssociation;
import <%= JACK_NAMESPACE %>.HasOneAssociation;

import <%= project_defn.databases_namespace %>.IDatabases;

<% model_defn.associations.each do |a| %>
<% if a.assoc_model.database_defn != model_defn.database_defn %>
<%= a.assoc_model.import %> 
<% end %>
<% end %>

public class <%=model_defn.model_name%> extends ModelWithId<<%= model_defn.model_name %>, IDatabases> {
  
  public static final long serialVersionUID = <%= model_defn.serial_version_uid %>L;

  // Fields
  <% model_defn.fields.each do |field_defn| %>
  private <%= field_defn.java_type %> __<%= field_defn.name %>;
  <% end %>

  // Associations
  <% model_defn.associations.each do |assoc| %>
  private <%= assoc.java_type %> <%= assoc.field_name %>;
  <% end %>

  public enum _Fields {
  <% model_defn.fields.each do |field_defn| %>
    <%= field_defn.name %>,
  <% end %>
  }

  public <%= model_defn.model_name %>(long id<%= create_signature_full.empty? ? "" : ", " %><%= create_signature_full %>, IDatabases databases) {
    super(id, databases);
  <% model_defn.fields.each do |field_defn| %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
  <% end %>

  <% model_defn.associations.each do |assoc| %>
    this.<%= assoc.field_name %> = <%= assoc.constructor_call %>;
  <% end %>
  }

  public <%= model_defn.model_name %>(long id<%= create_signature_full.empty? ? "" : ", " %><%= create_signature_full %>) {
    super(id, null);
  <% model_defn.fields.each do |field_defn| %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
  <% end %>
  }

<% if model_defn.fields.map{|field_defn| field_defn.name}.include?("created_at") && !model_defn.fields.find{|field_defn| field_defn.name == "created_at"}.nullable?%>
  public <%= model_defn.model_name %>(long id<%= model_defn.create_signature_full("created_at").empty? ? "" : ", " %><%= model_defn.create_signature_full("created_at") %>, IDatabases databases) {
    super(id, databases);
  <% model_defn.fields.reject{|f| f.name == "created_at"}.each do |field_defn| %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
  <% end %>
    this.__created_at = System.currentTimeMillis();

  <% model_defn.associations.each do |assoc| %>
    this.<%= assoc.field_name %> = <%= assoc.constructor_call %>;
  <% end %>
  }

  public <%= model_defn.model_name %>(long id<%= model_defn.create_signature_full("created_at").empty? ? "" : ", " %><%= model_defn.create_signature_full("created_at") %>) {
    super(id, null);
  <% model_defn.fields.reject{|f| f.name == "created_at"}.each do |field_defn| %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
  <% end %>
    this.__created_at = System.currentTimeMillis();
  }

<% end %>

  <% if !create_signature_small.nil? %>
  public <%= model_defn.model_name %>(long id<%= create_signature_small.empty? ? "" : ", " %><%= create_signature_small %>, IDatabases databases) {
    super(id, databases);
  <% model_defn.fields.each do |field_defn| %>
    <% if !field_defn.nullable? %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
    <% end %>
  <% end %>

  <% model_defn.associations.each do |assoc| %>
    this.<%= assoc.field_name %> = <%= assoc.constructor_call %>;
  <% end %>
  }

  public <%= model_defn.model_name %>(long id<%= create_signature_small.empty? ? "" : ", " %><%= create_signature_small %>) {
    super(id, null);
  <% model_defn.fields.each do |field_defn| %>
    <% if !field_defn.nullable? %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
    <% end %>
  <% end %>
  }

  <% if model_defn.fields.map{|field_defn| field_defn.name}.include?("created_at") && !model_defn.fields.find{|field_defn| field_defn.name == "created_at"}.nullable?%>
  public <%= model_defn.model_name %>(long id<%= model_defn.create_signature_small("created_at").empty? ? "" : ", " %><%= model_defn.create_signature_small("created_at") %>, IDatabases databases) {
    super(id, databases);
    <% model_defn.fields.reject{|f| f.name == "created_at"}.each do |field_defn| %>
     <% if !field_defn.nullable? %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
      <% end %>
    <% end %>
    this.__created_at = System.currentTimeMillis();

    <% model_defn.associations.each do |assoc| %>
    this.<%= assoc.field_name %> = <%= assoc.constructor_call %>;
    <% end %>
  }

  public <%= model_defn.model_name %>(long id<%= model_defn.create_signature_small("created_at").empty? ? "" : ", " %><%= model_defn.create_signature_small("created_at") %>) {
    super(id, null);
    <% model_defn.fields.reject{|f| f.name == "created_at"}.each do |field_defn| %>
      <% if !field_defn.nullable? %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
    <% end %>
    <% end %>
    this.__created_at = System.currentTimeMillis();
  }
  <% end %>
  <% end %>

  public static <%= model_defn.model_name %> newDefaultInstance(long id) {
    <% if create_argument_defaults.empty? %>
    return new <%= model_defn.model_name %>(id);
    <% else %>
    return new <%= model_defn.model_name %>(id, <%= create_argument_defaults %>);
    <% end %>
  }

  public <%= model_defn.model_name %>(long id, Map<Enum, Object> fieldsMap) {
    super(id, null);
    <% model_defn.fields.each do |field_defn| %>
    <% if field_defn.default_value.nil? %>
    <%= field_defn.java_type %> <%= field_defn.name %> = (<%= field_defn.java_type(true) %>) fieldsMap.get(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>);
    <% else %>
    <%= field_defn.java_type(true) %> <%= field_defn.name %>_tmp = (<%= field_defn.java_type(true) %>) fieldsMap.get(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>);
    <%= field_defn.java_type %> <%= field_defn.name %> = <%= field_defn.name %>_tmp == null ? <%= field_defn.default_value %> : <%= field_defn.name %>_tmp;
    <% end %>
    <% end %>

    <% model_defn.fields.each do |field_defn| %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
    <% end %>
  }

  public <%= model_defn.model_name %> (<%= model_defn.model_name %> other) {
    this(other, (IDatabases)null);
  }

  public <%= model_defn.model_name %> (<%= model_defn.model_name %> other, IDatabases databases) {
    super(other.getId(), databases);
  <% model_defn.fields.each do |field_defn| %>
    <% copy =  "other.#{field_defn.getter}" %>
    <% copy = field_defn.java_type == 'byte[]' ? "copyBinary(#{copy})" : copy %>
    this.__<%= field_defn.name %> = <%= copy %>;
  <% end %>

    if (databases != null) {
  <% model_defn.associations.each do |assoc| %>
      this.<%= assoc.field_name %> = <%= assoc.constructor_call %>;
  <% end %>
    }
  }

<% model_defn.fields.each do |field_defn| %>

  public <%= field_defn.java_type %> <%= field_defn.getter %>{
    return __<%= field_defn.name %>;
  }

  public <%= model_defn.model_name %> set<%= field_defn.name.camelcase %>(<%= field_defn.java_type %> newval){
    this.__<%= field_defn.name %> = newval;
    <% if field_defn.association != nil and field_defn.association.type == "belongs_to" %>
    if(<%= field_defn.association.field_name %> != null){
      this.<%= field_defn.association.field_name %>.setOwnerId(newval);
    }
    <% end %>
    cachedHashCode = 0;
    return this;
  }
<% end %>

  public void setField(_Fields field, Object value) {
    switch (field) {
  <% model_defn.fields.each do |field_defn| %>
      case <%= field_defn.name %>:
        set<%= field_defn.name.camelcase %>((<%= field_defn.java_type(true) %>) value);
        break;
  <% end %>
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
  <% model_defn.fields.each do |field_defn| %>
    if (fieldName.equals("<%= field_defn.name %>")) {
      set<%= field_defn.name.camelcase %>((<%= field_defn.java_type(true) %>)  value);
      return;
    }
  <% end %>
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
  <% model_defn.fields.each do |field_defn| %>
      case <%= field_defn.name %>:
        return <%= field_defn.java_type %>.class;
  <% end %>
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
  <% model_defn.fields.each do |field_defn| %>
    if (fieldName.equals("<%= field_defn.name %>")) {
      return <%= field_defn.java_type %>.class;
    }
  <% end %>
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

<% model_defn.associations.each do |a| %>

  public <%= a.assoc_getter_type %> <%= a.assoc_getter %>() throws IOException {
    return <%= a.field_name %>.get();
  }
<% end %>

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
  <% model_defn.fields.each do |field_defn| %>
    if (fieldName.equals("<%= field_defn.name %>")) {
      return <%= field_defn.getter %>;
    }
  <% end %>
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
  <% model_defn.fields.each do |field_defn| %>
      case <%= field_defn.name %>:
        return <%= field_defn.getter %>;
  <% end %>
    }
    throw new IllegalStateException("Invalid field: " + field);
  }
  
   public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
  <% model_defn.fields.each do |field_defn| %>
    if (fieldName.equals("<%= field_defn.name %>")) {
      return true;
    }
  <% end %>
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
  <% model_defn.fields.each do |field_defn| %>
      case <%= field_defn.name %>:
        return <%= field_defn.default_value.nil? ? "null" : field_defn.default_value %>;
  <% end %>
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public <%= model_defn.model_name %> getCopy() {
    return getCopy(databases);
  }

  @Override
  public <%= model_defn.model_name %> getCopy(IDatabases databases) {
    return new <%= model_defn.model_name %>(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.<%= model_defn.database_defn.getter %>.<%= model_defn.persistence_getter %>.save(this);
  }

  <% model_defn.associations.each do |association| %>
    <% assoc_field = association.assoc_model.fields.reject{|field_defn| field_defn.name != association.foreign_key }.first %>
    <% assoc_field_type = assoc_field.java_type rescue nil %>
    <% other_model_name = association.type == "belongs_to" ? association.foreign_key.gsub("_id", "").camelcase : association.assoc_model_name %>
    <% other_model_field = model_defn.fields.reject{|field_defn| field_defn.name != (association.foreign_key) }.first %>
    <% new_model_name = "new" + association.assoc_model_name %>
    <% if association.type != "has_many" %>
      <% signatures = [ association.assoc_model.create_signature(true, association.foreign_key), association.assoc_model.create_signature(false, association.foreign_key) ] %>
      <% arguments = [ association.assoc_model.field_names_list(true, false), association.assoc_model.field_names_list(false, false) ] %>
      <% if !signatures.include?("") %>
        <% signatures << "" %>
        <% arguments << association.assoc_model.create_argument_defaults %>
      <% end %>
      <% signatures.zip(arguments).each do |signature, argument_list| %>
        <% if !signature.nil? %>

  public <%= association.assoc_model_name %> <%= "create" %><%= other_model_name %>(<%= signature %>) throws IOException {
          <% if !assoc_field.nil? %>
    <%= association.assoc_getter_type %> previous = <%= association.assoc_getter %>(); 
    if (previous != null) {
            <% if assoc_field.nullable? %>
      previous.set<%= assoc_field.name.camelcase %>(null);  
      previous.save();
            <% else %>
      throw new RuntimeException("Cannot unset the foreign key on the associated object");
            <% end %>
    }
          <% end %> 
          <% if !assoc_field_type.nil? %>
    <%= assoc_field_type %> <%= association.foreign_key %> = <%= ["Integer", "int"].include?(assoc_field_type) ? "safeLongToInt(getId())" : "getId()" %>;
          <% end %>
    <%= association.assoc_model_name %> <%= new_model_name %> = databases.<%= association.assoc_model.database_defn.getter %>.<%= association.assoc_model.persistence_getter %>.create(<%= argument_list %>);
          <% if !other_model_field.nil? %>
    <% safe_cast_other_model_id = ["Integer", "int"].include?(other_model_field.java_type) %>
    set<%= other_model_field.name.camelcase %>(<%= (safe_cast_other_model_id ? "safeLongToInt(" : "") + new_model_name + ".getId()" + (safe_cast_other_model_id ? ")" : "") %>);
          <% end %>
    save();
    <%= association.field_name %>.clearCache();
    return <%= new_model_name %>;
  }
        <% end %>
      <% end %>
    <% end %>
  <% end %>

  public String toString() {
    return "<<%= model_defn.model_name %>"
      <% model_defn.fields.each do |field_defn| %>
      + " <%= field_defn.name %>: " + __<%= field_defn.name %>
      <% end %>
      + ">";
  }
}
