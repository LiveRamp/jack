<%#
# Copyright 2011 Rapleaf
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
%>
<%= autogenerated %>
package <%= root_package %>.impl;

import java.io.IOException;

import <%= root_package %>.I<%=db_name%>;
import <%= JACK_NAMESPACE %>.BaseDatabaseConnection;

<% model_defns.each do |model_defn| %>
import <%= root_package %>.iface.<%= model_defn.iface_name %>;
<% end%>

import <%= project_defn.databases_namespace %>.IDatabases;

public class <%=db_name%>Impl implements I<%=db_name%> {
  
  private final BaseDatabaseConnection conn;
  
<% model_defns.each do |model_defn| %>
  private final <%= model_defn.iface_name %> <%= model_defn.table_name %>;
<% end %>

  public <%=db_name%>Impl(BaseDatabaseConnection conn, IDatabases databases) {
    this.conn = conn;
  <% model_defns.each do |model_defn| %>
    this.<%= model_defn.table_name %> = new <%= model_defn.impl_name %>(conn, databases);
  <% end %>
  }

  <% model_defns.each do |model_defn| %>

  public <%= model_defn.iface_name %> <%= model_defn.persistence_getter %>{
    return <%= model_defn.table_name %>;
  }
  <% end %>

  public boolean deleteAll() throws IOException {
    boolean success = true;
    try {
  <% model_defns.each do |model_defn| %>
    success &= <%= model_defn.table_name %>.deleteAll();
  <% end %>
    } catch (IOException e) {
      throw e;
    }
    return success;
  }

  public void disableCaching() {
  <% model_defns.each do |model_defn| %>
    <%= model_defn.table_name %>.disableCaching();
  <% end %>
  }

  public void setAutoCommit(boolean autoCommit) {
    conn.setAutoCommit(autoCommit);
  }

  public boolean getAutoCommit() {
    return conn.getAutoCommit();
  }

  public void commit() {
    conn.commit();
  }

  public void rollback() {
    conn.rollback();
  }

}
