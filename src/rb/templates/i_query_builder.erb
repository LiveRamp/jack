package <%= root_package %>.query;

import java.util.Set;

import <%= JACK_NAMESPACE %>.queries.FieldSelector;
import <%= JACK_NAMESPACE %>.queries.where_operators.IWhereOperator;
import <%= JACK_NAMESPACE %>.queries.QueryOrder;
import <%= root_package %>.models.<%= model_defn.model_name %>;

public interface <%= model_defn.i_query_builder_name %> {

  <%= model_defn.query_builder_name %> select(<%=model_defn.model_name %>._Fields... fields);

  <%= model_defn.query_builder_name %> selectAgg(FieldSelector... aggregatedFields);

  <%= model_defn.query_builder_name %> id(Long value);

  <%= model_defn.query_builder_name %> idIn(Set<Long> values);

  <%= model_defn.query_builder_name %> limit(int offset, int nResults);

  <%= model_defn.query_builder_name %> limit(int nResults);

  <%= model_defn.query_builder_name %> groupBy(<%=model_defn.model_name %>._Fields... fields);

  <%= model_defn.i_ordered_query_builder_name %> order();

  <%= model_defn.i_ordered_query_builder_name %> order(QueryOrder queryOrder);

  <%= model_defn.i_ordered_query_builder_name %> orderById();

  <%= model_defn.i_ordered_query_builder_name %> orderById(QueryOrder queryOrder);

  <% model_defn.fields.each do |field_defn| %>

  <%= model_defn.query_builder_name %> <%= field_defn.name.camelcase(:lower) %>(<%= field_defn.java_type(true) %> value);

  <%= model_defn.query_builder_name %> where<%= field_defn.name.camelcase() %>(IWhereOperator<<%= field_defn.java_type(true) %>> operator);

  <%= model_defn.i_ordered_query_builder_name %> orderBy<%= field_defn.name.camelcase() %>();

  <%= model_defn.i_ordered_query_builder_name %> orderBy<%= field_defn.name.camelcase() %>(QueryOrder queryOrder);

  <% end %>
}
