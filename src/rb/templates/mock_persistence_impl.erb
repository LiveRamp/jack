<%#
# Copyright 2011 Rapleaf
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
%>
<%= autogenerated %>
package <%= root_package %>.mock_impl;

import java.util.Arrays;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import <%= JACK_NAMESPACE %>.AbstractMockDatabaseModel;
import <%= JACK_NAMESPACE %>.ModelWithId;

import <%= root_package %>.models.<%= model_defn.model_name %>;
import <%= root_package %>.iface.<%= model_defn.iface_name %>;

import <%= project_defn.databases_namespace %>.IDatabases;

public class <%= model_defn.mock_impl_name %> extends AbstractMockDatabaseModel<<%= model_defn.model_name %>, IDatabases> implements <%= model_defn.iface_name %> {
  private final IDatabases databases;

  private static AtomicInteger curId = new AtomicInteger(1);

  public <%= model_defn.mock_impl_name %>(IDatabases databases) {
    super(databases);
    this.databases = databases;
  }

  @Override
  public <%= model_defn.model_name %> create(Map<Enum, Object> fieldsMap) throws IOException {
    <% model_defn.fields.each do |field_defn| %>
    <% if field_defn.default_value.nil? %>
    <%= field_defn.java_type %> <%= field_defn.name %> = (<%= field_defn.java_type(true) %>) fieldsMap.get(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>);
    <% else %>
    <%= field_defn.java_type(true) %> <%= field_defn.name %>_tmp = (<%= field_defn.java_type(true) %>) fieldsMap.get(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>);
    <%= field_defn.java_type %> <%= field_defn.name %> = <%= field_defn.name %>_tmp == null ? <%= field_defn.default_value %> : <%= field_defn.name %>_tmp;
    <% end %>
    <% end %>
    return create(<%= model_defn.fields.map{|field| field.name }.join(', ') %>);
  }

  <%= render_mock_create_method(model_defn, create_signature_full) %>
  <% unless create_signature_small.nil? %>
    <%= render_mock_create_method(model_defn, create_signature_small, true) %>
  <% end %>

  public <%= model_defn.model_name %> createDefaultInstance() throws IOException {
    return create(<%= create_argument_defaults %>);
  }

  public Set<<%= model_defn.model_name %>> find(Map<Enum, Object> fieldsMap) throws IOException {
    return super.realFind(fieldsMap);
  }

  public Set<<%= model_defn.model_name %>> find(Set<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    return super.realFind(ids, fieldsMap);
  }

  <% model_defn.fields.each do |field_defn| %>

  public Set<<%= model_defn.model_name %>> findBy<%= field_defn.name.camelcase %>(final <%= field_defn.java_type %> value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>, value);}});
  }
  <% end %>
}
