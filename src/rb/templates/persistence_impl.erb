<%#
# Copyright 2011 Rapleaf
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
%>
<%= autogenerated %>
package <%= root_package %>.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import <%= JACK_NAMESPACE %>.AbstractDatabaseModel;
import <%= JACK_NAMESPACE %>.BaseDatabaseConnection;
import <%= JACK_NAMESPACE %>.ModelWithId;

import <%= root_package %>.models.<%= model_defn.model_name %>;
import <%= root_package %>.iface.<%= model_defn.iface_name %>;

import <%= project_defn.databases_namespace %>.IDatabases;

public class <%= model_defn.impl_name %> extends AbstractDatabaseModel<<%= model_defn.model_name %>> implements <%= model_defn.iface_name %> {
  private final IDatabases databases;

  public <%= model_defn.impl_name %>(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "<%= model_defn.table_name %>", Arrays.asList(<%= model_defn.fields.map{|x| "\"#{x.name}\""}.join(", ") %>));
    this.databases = databases;
  }

  @Override
  public ModelWithId create(Map<Enum, Object> fieldsMap) throws IOException {
    <% model_defn.fields.each do |field_defn| %>
    <% if field_defn.default_value.nil? %>
    <%= field_defn.java_type %> <%= field_defn.name %> = (<%= field_defn.java_type(true) %>) fieldsMap.get(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>);
    <% else %>
    <%= field_defn.java_type(true) %> <%= field_defn.name %>_tmp = (<%= field_defn.java_type(true) %>) fieldsMap.get(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>);
    <%= field_defn.java_type %> <%= field_defn.name %> = <%= field_defn.name %>_tmp == null ? <%= field_defn.default_value %> : <%= field_defn.name %>_tmp;
    <% end %>
    <% end %>
    return create(<%= model_defn.fields.map{|field| field.name }.join(', ') %>);
  }

  <%= render_create_method(model_defn, create_signature_full) %>
  <% unless create_signature_small.nil? %>
    <%= render_create_method(model_defn, create_signature_small, true) %>
  <% end %>

  public Set<<%= model_defn.model_name %>> find(Map<Enum, Object> fieldsMap) throws IOException {
    return find(null, fieldsMap);
  }

  public Set<<%= model_defn.model_name %>> find(Set<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    Set<<%= model_defn.model_name %>> foundSet = new HashSet<<%= model_defn.model_name %>>();
    
    if (fieldsMap == null || fieldsMap.isEmpty()) {
      return foundSet;
    }

    StringBuilder statementString = new StringBuilder();
    statementString.append("SELECT * FROM <%= model_defn.table_name %> WHERE (");
    List<Object> nonNullValues = new ArrayList<Object>();
    List<<%= model_defn.model_name %>._Fields> nonNullValueFields = new ArrayList<<%= model_defn.model_name %>._Fields>();

    Iterator<Map.Entry<Enum, Object>> iter = fieldsMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Enum, Object> entry = iter.next();
      Enum field = entry.getKey();
      Object value = entry.getValue();
      
      String queryValue = value != null ? " = ? " : " IS NULL";
      if (value != null) {
        nonNullValueFields.add((<%= model_defn.model_name %>._Fields) field);
        nonNullValues.add(value);
      }

      statementString.append(field + queryValue);
      if (iter.hasNext()) {
        statementString.append(" AND ");
      }
    }
    if (ids != null) statementString.append(" AND " + getIdSetCondition(ids));
    statementString.append(")");

    PreparedStatement preparedStatement = getPreparedStatement(statementString.toString());

    for (int i = 0; i < nonNullValues.size(); i++) {
      <%= model_defn.model_name %>._Fields field = nonNullValueFields.get(i);
      try {
        switch (field) {
    <% model_defn.fields.each do |field_defn| %>
          case <%= field_defn.name %>:
            preparedStatement.set<%=field_defn.prep_stmt_type%>(i+1, <%=field_defn.prep_stmt_modifier("(#{field_defn.java_type(true)}) nonNullValues.get(i)")%>);
            break;
    <% end %>
        }
      } catch (SQLException e) {
        throw new IOException(e);
      }
    }
    executeQuery(foundSet, preparedStatement);

    return foundSet;
  }

  @Override
  protected void setAttrs(<%= model_defn.model_name %> model, PreparedStatement stmt) throws SQLException {
    <% x = 1 %>
    <% model_defn.fields.each do |field_defn| %>
    <% if field_defn.nullable? %>
    if (model.<%= field_defn.getter %> == null) {
      stmt.setNull(<%= x %>, java.sql.Types.<%= field_defn.sql_type %>);
    } else {
    <% else %>
    {
    <% end %>
      stmt.set<%= field_defn.prep_stmt_type %>(<%= x %>, <%= field_defn.prep_stmt_modifier("model.#{field_defn.getter}") %>);
    }
      <% x+= 1 %>
    <% end %>
    stmt.setLong(<%= x %>, model.getId());
  }

  @Override
  protected <%= model_defn.model_name %> instanceFromResultSet(ResultSet rs) throws SQLException {
    return new <%= model_defn.model_name %>(rs.getLong("id"),
    <% model_defn.fields.each do |field_defn| %>
      <%= field_defn.get_from_rs %>,
    <% end %>
      databases
    );
  }

  <% model_defn.fields.each do |field_defn| %>

  public Set<<%= model_defn.model_name %>> findBy<%= field_defn.name.camelcase %>(final <%= field_defn.java_type %> value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>, value);}});
  }
  <% end %>
}
