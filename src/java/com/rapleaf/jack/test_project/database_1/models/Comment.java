
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
/* generated from migration version 20110324000133 */
package com.rapleaf.jack.test_project.database_1.models;

import java.io.IOException;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;

import com.rapleaf.jack.test_project.database_1.IDatabase1;

import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;

import com.rapleaf.jack.test_project.IDatabases;

public class Comment extends ModelWithId {
  // Fields
  private String __content;
  private int __commenter_id;
  private long __commented_on_id;
  private long __created_at;

  // Associations
  private BelongsToAssociation<User> __assoc_user;
  private BelongsToAssociation<Post> __assoc_post;

  public enum _Fields {
    content,
    commenter_id,
    commented_on_id,
    created_at,
  }

  public Comment(long id, final String content, final int commenter_id, final long commented_on_id, final long created_at, IDatabases databases) {
    super(id);
    this.__content = content;
    this.__commenter_id = commenter_id;
    this.__commented_on_id = commented_on_id;
    this.__created_at = created_at;
    this.__assoc_user = new BelongsToAssociation<User>(databases.getDatabase1().users(), (long) commenter_id);
    this.__assoc_post = new BelongsToAssociation<Post>(databases.getDatabase1().posts(), commented_on_id);
  }

  public Comment(long id, final String content, final int commenter_id, final long commented_on_id, final long created_at) {
    super(id);
    this.__content = content;
    this.__commenter_id = commenter_id;
    this.__commented_on_id = commented_on_id;
    this.__created_at = created_at;
  }

  public Comment(long id, Map<Enum, Object> fieldsMap) {
    super(id);
    String content = (String) fieldsMap.get(Comment._Fields.content);
    int commenter_id = (Integer) fieldsMap.get(Comment._Fields.commenter_id);
    long commented_on_id = (Long) fieldsMap.get(Comment._Fields.commented_on_id);
    Long created_at_tmp = (Long) fieldsMap.get(Comment._Fields.created_at);
    long created_at = created_at_tmp == null ? 28800000 : created_at_tmp;
    this.__content = content;
    this.__commenter_id = commenter_id;
    this.__commented_on_id = commented_on_id;
    this.__created_at = created_at;
  }

  public Comment (Comment other) {
    super(other.getId());
    this.__content = other.getContent();
    this.__commenter_id = other.getCommenterId();
    this.__commented_on_id = other.getCommentedOnId();
    this.__created_at = other.getCreatedAt();
  }

  public String getContent(){
    return __content;
  }

  public void setContent(String newval){
    this.__content = newval;
  }

  public int getCommenterId(){
    return __commenter_id;
  }

  public void setCommenterId(int newval){
    this.__commenter_id = newval;
  }

  public long getCommentedOnId(){
    return __commented_on_id;
  }

  public void setCommentedOnId(long newval){
    this.__commented_on_id = newval;
  }

  public long getCreatedAt(){
    return __created_at;
  }

  public void setCreatedAt(long newval){
    this.__created_at = newval;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case content:
        setContent((String) value);
        break;
      case commenter_id:
        setCommenterId((Integer) value);
        break;
      case commented_on_id:
        setCommentedOnId((Long) value);
        break;
      case created_at:
        setCreatedAt((Long) value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case content:
        return String.class;
      case commenter_id:
        return int.class;
      case commented_on_id:
        return long.class;
      case created_at:
        return long.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("content")) {
      return String.class;
    }
    if (fieldName.equals("commenter_id")) {
      return int.class;
    }
    if (fieldName.equals("commented_on_id")) {
      return long.class;
    }
    if (fieldName.equals("created_at")) {
      return long.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public User getUser() throws IOException {
    return __assoc_user.get();
  }

  public Post getPost() throws IOException {
    return __assoc_post.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("content")) {
      return getContent();
    }
    if (fieldName.equals("commenter_id")) {
      return getCommenterId();
    }
    if (fieldName.equals("commented_on_id")) {
      return getCommentedOnId();
    }
    if (fieldName.equals("created_at")) {
      return getCreatedAt();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case content:
        return getContent();
      case commenter_id:
        return getCommenterId();
      case commented_on_id:
        return getCommentedOnId();
      case created_at:
        return getCreatedAt();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case content:
        return null;
      case commenter_id:
        return null;
      case commented_on_id:
        return null;
      case created_at:
        return 28800000;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public ModelWithId getCopy() {
    return new Comment(this);
  }

  public String toString() {
    return "<Comment"
      + " content: " + __content
      + " commenter_id: " + __commenter_id
      + " commented_on_id: " + __commented_on_id
      + " created_at: " + __created_at
      + ">";
  }
}
